package com.example.atest;

import android.os.Bundle;
import android.app.Activity;
import android.view.Menu;
import android.view.View;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;

import android.util.Log;
import android.widget.Toast;

public class MainActivity extends Activity {
	
	private String Tag = "UPLOADER";
    private String urlString = "http://leaf.dpw.dc.gov/deployment/ServiceHandler/ImageUploader.ashx";
    HttpURLConnection conn;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		/*try {
			PlayWithRawFiles();
		} catch (IOException e) {
			Toast.makeText(getApplicationContext(), 
						 "Problems: " + e.getMessage(), 1).show();
		}*/
	}
/*
	public void PlayWithRawFiles() throws IOException {      
		String str="";
		StringBuffer buf = new StringBuffer();			
		InputStream is = this.getResources().openRawResource(R.drawable.ic_launcher);
		BufferedReader reader = new BufferedReader(new InputStreamReader(is));
		if (is!=null) {							
			while ((str = reader.readLine()) != null) {	
				buf.append(str + "\n" );
			}				
		}		
		is.close();	
		Toast.makeText(getBaseContext(), 
				buf.toString(), Toast.LENGTH_LONG).show();				
			

	}// PlayWithSDFiles*/
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}
	
	
	public void write_file() {
		//String filename = "myfile";
		String string = "Load Image to DPW.200 Web Server";
		//File file;
		File file = new File(this.getFilesDir(), "test.txt");
		try {
			FileOutputStream outputStream = new FileOutputStream(file);
		  //outputStream = openFileOutput(filename, Context.MODE_PRIVATE);
		  outputStream.write(string.getBytes());
		  outputStream.close();
		} catch (Exception e) {
		  e.printStackTrace();
		}
	}
	
	public void Browse_file(View view) {
		HttpURLConnection connection = null;
		DataOutputStream outputStream = null;
		DataInputStream inputStream = null;

		String pathToOurFile = "";
		String urlServer = "http://leaf.dpw.dc.gov/deployment/ServiceHandler/ImageUploader.ashx";
		String lineEnd = "\r\n";
		String twoHyphens = "--";
		String boundary =  "*****";

		int bytesRead, bytesAvailable, bufferSize;
		byte[] buffer;
		int maxBufferSize = 1*1024*1024;

		write_file();
		System.setProperty("http.keepAlive", "false");
		pathToOurFile = this.getFilesDir() + "/test.txt";
		try {
		URL url1 = new URL("http://www.bing.com/");
        //URL url1 = new URL("http://leaf.dpw.dc.gov/deployment/ServiceHandler/ImageUploader.ashx");
        HttpURLConnection urlConnection = (HttpURLConnection)url1.openConnection();
        BufferedReader in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
        //BufferedReader in = new BufferedReader(new InputStreamReader(urlConnection.getOutputStream()));
        String inputLine;
        inputLine = in.readLine();
       /* while ((inputLine = in.readLine()) != null) {
        	System.out.println(inputLine);
        }*/
        
        int serverResponseCode = urlConnection.getResponseCode();
        String serverResponseMessage = urlConnection.getResponseMessage();
		}
		catch (Exception ex)
		{
		//Exception handling
		}
		
		try
		{
		//FileInputStream fileInputStream = new FileInputStream(new File(pathToOurFile) );
			InputStream fileInputStream = this.getResources().openRawResource(R.drawable.ic_launcher);

		URL url = new URL(urlServer);
		connection = (HttpURLConnection) url.openConnection();

		// Allow Inputs & Outputs
		connection.setDoInput(true);
		connection.setDoOutput(true);
		connection.setUseCaches(false);

		// Enable POST method
		connection.setRequestMethod("POST");

		connection.setRequestProperty("Connection", "Keep-Alive");
		connection.setRequestProperty("Content-Type", "multipart/form-data;boundary="+boundary);

		//connection.getInputStream();
		
		outputStream = new DataOutputStream( connection.getOutputStream() );
		outputStream.writeBytes(twoHyphens + boundary + lineEnd);
		outputStream.writeBytes("Content-Disposition: form-data; name=\"uploadedfile\";filename=\"" + pathToOurFile +"\"" + lineEnd);
		outputStream.writeBytes(lineEnd);

		bytesAvailable = fileInputStream.available();
		bufferSize = Math.min(bytesAvailable, maxBufferSize);
		buffer = new byte[bufferSize];

		// Read file
		bytesRead = fileInputStream.read(buffer, 0, bufferSize);

		while (bytesRead > 0)
		{
		outputStream.write(buffer, 0, bufferSize);
		bytesAvailable = fileInputStream.available();
		bufferSize = Math.min(bytesAvailable, maxBufferSize);
		bytesRead = fileInputStream.read(buffer, 0, bufferSize);
		}

		outputStream.writeBytes(lineEnd);
		outputStream.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);

		// Responses from the server (code and message)
		int serverResponseCode = connection.getResponseCode();
		String serverResponseMessage = connection.getResponseMessage();

		fileInputStream.close();
		outputStream.flush();
		outputStream.close();
		}
		catch (Exception ex)
		{
		//Exception handling
		}
	}
	
	public void Browse_file1(View view) {    

		
		// Do something in response to button
		String exsistingFileName = "/sdcard/uploader/data/testfile";

        String lineEnd = "\r\n";
        String twoHyphens = "--";
        String boundary = "*****";
        try {
            // ------------------ CLIENT REQUEST

        	write_file();
            Log.e(Tag, "Inside second Method");
            System.setProperty("http.keepAlive", "false");
            
            FileInputStream fileInputStream = new FileInputStream(new File(this.getFilesDir(), "test.txt"));
            /*BufferedReader fin = new BufferedReader(new InputStreamReader(fileInputStream));
            String fileInputLine;
            while ((fileInputLine = fin.readLine()) != null) {
            	System.out.println(fileInputLine);
            }
            fin.close();
            */
            //InputStream fileInputStream = this.getResources().openRawResource(R.drawable.ic_launcher);

            //URL url1 = new URL("http://www.bing.com/");
            //URL url1 = new URL("http://192.168.200.24:47284/ServiceHandler/ImageUploader.ashx");
            URL url1 = new URL("http://leaf.dpw.dc.gov/deployment/ServiceHandler/ImageUploader.ashx");
            HttpURLConnection urlConnection = (HttpURLConnection)url1.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            //BufferedReader in = new BufferedReader(new InputStreamReader(urlConnection.getOutputStream()));
            String inputLine;
            inputLine = in.readLine();
           /* while ((inputLine = in.readLine()) != null) {
            	System.out.println(inputLine);
            }*/
            
            int serverResponseCode = urlConnection.getResponseCode();
	        String serverResponseMessage = urlConnection.getResponseMessage();
            
            in.close();
            
            // open a URL connection to the Servlet

            URL url = new URL(urlString);

            // Open a HTTP connection to the URL

            conn = (HttpURLConnection) url.openConnection();

            // Allow Inputs
            conn.setDoInput(true);

            // Allow Outputs
            conn.setDoOutput(true);

            // Don't use a cached copy.
            conn.setUseCaches(false);

            // Use a post method.
            conn.setRequestMethod("POST");

            conn.setRequestProperty("Connection", "Keep-Alive");

            conn.setRequestProperty("Content-Type",
            		//"multipart/form-data;");
                    "multipart/form-data;boundary=" + boundary);

            //DataOutputStream dIs = new DataInputStream(conn.getInputStream());
            
            DataOutputStream dos = new DataOutputStream(conn.getOutputStream());

            dos.writeBytes(twoHyphens + boundary + lineEnd);
            dos.writeBytes("Content-Disposition: post-data; name=uploadedfile;filename="
                            + exsistingFileName + "" + lineEnd);
            dos.writeBytes(lineEnd);

            Log.e(Tag, "Headers are written");

            // create a buffer of maximum size
            
            int bytesAvailable = fileInputStream.available();
            int maxBufferSize = 1000;
            // int bufferSize = Math.min(bytesAvailable, maxBufferSize);
            byte[] buffer = new byte[bytesAvailable];

            // read file and write it into form...

            int bytesRead = fileInputStream.read(buffer, 0, bytesAvailable);

            while (bytesRead > 0) {
                dos.write(buffer, 0, bytesAvailable);
                bytesAvailable = fileInputStream.available();
                bytesAvailable = Math.min(bytesAvailable, maxBufferSize);
                bytesRead = fileInputStream.read(buffer, 0, bytesAvailable);
            }

            // send multipart form data necesssary after file data...

            dos.writeBytes(lineEnd);
            dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);

	         // Responses from the server (code and message)
	        serverResponseCode = conn.getResponseCode();
	        serverResponseMessage = conn.getResponseMessage();
	         
	         
            // close streams
            Log.e(Tag, "File is written");
            fileInputStream.close();
            dos.flush();
            dos.close();

        } catch (MalformedURLException ex) {
            Log.e(Tag, "error: " + ex.getMessage(), ex);
        }

        catch (IOException ioe) {
            Log.e(Tag, "error: " + ioe.getMessage(), ioe);
        }

        try {
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn
                    .getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                Log.e("Dialoge Box", "Message: " + line);
            }
            rd.close();

        } catch (IOException ioex) {
            Log.e("MediaPlayer", "error: " + ioex.getMessage(), ioex);
        }
	}

}
